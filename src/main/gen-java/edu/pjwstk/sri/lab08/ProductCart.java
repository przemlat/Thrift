/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pjwstk.sri.lab08;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-11")
public class ProductCart {

  public interface Iface {

    public void addItem(OrderItem orderItem) throws ProductNotAvailableException, org.apache.thrift.TException;

    public void removeFromCart(long productId) throws org.apache.thrift.TException;

    public void changeNumberOfPieces(OrderItem orderItem) throws ProductNotAvailableException, org.apache.thrift.TException;

    public String confirmOrder() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addItem(OrderItem orderItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeFromCart(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void changeNumberOfPieces(OrderItem orderItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmOrder(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addItem(OrderItem orderItem) throws ProductNotAvailableException, org.apache.thrift.TException
    {
      send_addItem(orderItem);
      recv_addItem();
    }

    public void send_addItem(OrderItem orderItem) throws org.apache.thrift.TException
    {
      addItem_args args = new addItem_args();
      args.setOrderItem(orderItem);
      sendBase("addItem", args);
    }

    public void recv_addItem() throws ProductNotAvailableException, org.apache.thrift.TException
    {
      addItem_result result = new addItem_result();
      receiveBase(result, "addItem");
      if (result.productNotAvailableException != null) {
        throw result.productNotAvailableException;
      }
      return;
    }

    public void removeFromCart(long productId) throws org.apache.thrift.TException
    {
      send_removeFromCart(productId);
      recv_removeFromCart();
    }

    public void send_removeFromCart(long productId) throws org.apache.thrift.TException
    {
      removeFromCart_args args = new removeFromCart_args();
      args.setProductId(productId);
      sendBase("removeFromCart", args);
    }

    public void recv_removeFromCart() throws org.apache.thrift.TException
    {
      removeFromCart_result result = new removeFromCart_result();
      receiveBase(result, "removeFromCart");
      return;
    }

    public void changeNumberOfPieces(OrderItem orderItem) throws ProductNotAvailableException, org.apache.thrift.TException
    {
      send_changeNumberOfPieces(orderItem);
      recv_changeNumberOfPieces();
    }

    public void send_changeNumberOfPieces(OrderItem orderItem) throws org.apache.thrift.TException
    {
      changeNumberOfPieces_args args = new changeNumberOfPieces_args();
      args.setOrderItem(orderItem);
      sendBase("changeNumberOfPieces", args);
    }

    public void recv_changeNumberOfPieces() throws ProductNotAvailableException, org.apache.thrift.TException
    {
      changeNumberOfPieces_result result = new changeNumberOfPieces_result();
      receiveBase(result, "changeNumberOfPieces");
      if (result.productNotAvailableException != null) {
        throw result.productNotAvailableException;
      }
      return;
    }

    public String confirmOrder() throws org.apache.thrift.TException
    {
      send_confirmOrder();
      return recv_confirmOrder();
    }

    public void send_confirmOrder() throws org.apache.thrift.TException
    {
      confirmOrder_args args = new confirmOrder_args();
      sendBase("confirmOrder", args);
    }

    public String recv_confirmOrder() throws org.apache.thrift.TException
    {
      confirmOrder_result result = new confirmOrder_result();
      receiveBase(result, "confirmOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmOrder failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addItem(OrderItem orderItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addItem_call method_call = new addItem_call(orderItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderItem orderItem;
      public addItem_call(OrderItem orderItem, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderItem = orderItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addItem_args args = new addItem_args();
        args.setOrderItem(orderItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ProductNotAvailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addItem();
      }
    }

    public void removeFromCart(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFromCart_call method_call = new removeFromCart_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFromCart_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long productId;
      public removeFromCart_call(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFromCart", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFromCart_args args = new removeFromCart_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeFromCart();
      }
    }

    public void changeNumberOfPieces(OrderItem orderItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeNumberOfPieces_call method_call = new changeNumberOfPieces_call(orderItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeNumberOfPieces_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderItem orderItem;
      public changeNumberOfPieces_call(OrderItem orderItem, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderItem = orderItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeNumberOfPieces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeNumberOfPieces_args args = new changeNumberOfPieces_args();
        args.setOrderItem(orderItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ProductNotAvailableException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_changeNumberOfPieces();
      }
    }

    public void confirmOrder(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmOrder_call method_call = new confirmOrder_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      public confirmOrder_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmOrder_args args = new confirmOrder_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmOrder();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addItem", new addItem());
      processMap.put("removeFromCart", new removeFromCart());
      processMap.put("changeNumberOfPieces", new changeNumberOfPieces());
      processMap.put("confirmOrder", new confirmOrder());
      return processMap;
    }

    public static class addItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addItem_args> {
      public addItem() {
        super("addItem");
      }

      public addItem_args getEmptyArgsInstance() {
        return new addItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addItem_result getResult(I iface, addItem_args args) throws org.apache.thrift.TException {
        addItem_result result = new addItem_result();
        try {
          iface.addItem(args.orderItem);
        } catch (ProductNotAvailableException productNotAvailableException) {
          result.productNotAvailableException = productNotAvailableException;
        }
        return result;
      }
    }

    public static class removeFromCart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFromCart_args> {
      public removeFromCart() {
        super("removeFromCart");
      }

      public removeFromCart_args getEmptyArgsInstance() {
        return new removeFromCart_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeFromCart_result getResult(I iface, removeFromCart_args args) throws org.apache.thrift.TException {
        removeFromCart_result result = new removeFromCart_result();
        iface.removeFromCart(args.productId);
        return result;
      }
    }

    public static class changeNumberOfPieces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeNumberOfPieces_args> {
      public changeNumberOfPieces() {
        super("changeNumberOfPieces");
      }

      public changeNumberOfPieces_args getEmptyArgsInstance() {
        return new changeNumberOfPieces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeNumberOfPieces_result getResult(I iface, changeNumberOfPieces_args args) throws org.apache.thrift.TException {
        changeNumberOfPieces_result result = new changeNumberOfPieces_result();
        try {
          iface.changeNumberOfPieces(args.orderItem);
        } catch (ProductNotAvailableException productNotAvailableException) {
          result.productNotAvailableException = productNotAvailableException;
        }
        return result;
      }
    }

    public static class confirmOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmOrder_args> {
      public confirmOrder() {
        super("confirmOrder");
      }

      public confirmOrder_args getEmptyArgsInstance() {
        return new confirmOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmOrder_result getResult(I iface, confirmOrder_args args) throws org.apache.thrift.TException {
        confirmOrder_result result = new confirmOrder_result();
        result.success = iface.confirmOrder();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addItem", new addItem());
      processMap.put("removeFromCart", new removeFromCart());
      processMap.put("changeNumberOfPieces", new changeNumberOfPieces());
      processMap.put("confirmOrder", new confirmOrder());
      return processMap;
    }

    public static class addItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addItem_args, Void> {
      public addItem() {
        super("addItem");
      }

      public addItem_args getEmptyArgsInstance() {
        return new addItem_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addItem_result result = new addItem_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addItem_result result = new addItem_result();
            if (e instanceof ProductNotAvailableException) {
                        result.productNotAvailableException = (ProductNotAvailableException) e;
                        result.setProductNotAvailableExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addItem_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addItem(args.orderItem,resultHandler);
      }
    }

    public static class removeFromCart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeFromCart_args, Void> {
      public removeFromCart() {
        super("removeFromCart");
      }

      public removeFromCart_args getEmptyArgsInstance() {
        return new removeFromCart_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeFromCart_result result = new removeFromCart_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeFromCart_result result = new removeFromCart_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeFromCart_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeFromCart(args.productId,resultHandler);
      }
    }

    public static class changeNumberOfPieces<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeNumberOfPieces_args, Void> {
      public changeNumberOfPieces() {
        super("changeNumberOfPieces");
      }

      public changeNumberOfPieces_args getEmptyArgsInstance() {
        return new changeNumberOfPieces_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            changeNumberOfPieces_result result = new changeNumberOfPieces_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            changeNumberOfPieces_result result = new changeNumberOfPieces_result();
            if (e instanceof ProductNotAvailableException) {
                        result.productNotAvailableException = (ProductNotAvailableException) e;
                        result.setProductNotAvailableExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeNumberOfPieces_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.changeNumberOfPieces(args.orderItem,resultHandler);
      }
    }

    public static class confirmOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmOrder_args, String> {
      public confirmOrder() {
        super("confirmOrder");
      }

      public confirmOrder_args getEmptyArgsInstance() {
        return new confirmOrder_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            confirmOrder_result result = new confirmOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmOrder_result result = new confirmOrder_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmOrder_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.confirmOrder(resultHandler);
      }
    }

  }

  public static class addItem_args implements org.apache.thrift.TBase<addItem_args, addItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<addItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addItem_args");

    private static final org.apache.thrift.protocol.TField ORDER_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderItem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addItem_argsTupleSchemeFactory());
    }

    public OrderItem orderItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ITEM((short)1, "orderItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ITEM
            return ORDER_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ITEM, new org.apache.thrift.meta_data.FieldMetaData("orderItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addItem_args.class, metaDataMap);
    }

    public addItem_args() {
    }

    public addItem_args(
      OrderItem orderItem)
    {
      this();
      this.orderItem = orderItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addItem_args(addItem_args other) {
      if (other.isSetOrderItem()) {
        this.orderItem = new OrderItem(other.orderItem);
      }
    }

    public addItem_args deepCopy() {
      return new addItem_args(this);
    }

    @Override
    public void clear() {
      this.orderItem = null;
    }

    public OrderItem getOrderItem() {
      return this.orderItem;
    }

    public addItem_args setOrderItem(OrderItem orderItem) {
      this.orderItem = orderItem;
      return this;
    }

    public void unsetOrderItem() {
      this.orderItem = null;
    }

    /** Returns true if field orderItem is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderItem() {
      return this.orderItem != null;
    }

    public void setOrderItemIsSet(boolean value) {
      if (!value) {
        this.orderItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ITEM:
        if (value == null) {
          unsetOrderItem();
        } else {
          setOrderItem((OrderItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ITEM:
        return getOrderItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ITEM:
        return isSetOrderItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addItem_args)
        return this.equals((addItem_args)that);
      return false;
    }

    public boolean equals(addItem_args that) {
      if (that == null)
        return false;

      boolean this_present_orderItem = true && this.isSetOrderItem();
      boolean that_present_orderItem = true && that.isSetOrderItem();
      if (this_present_orderItem || that_present_orderItem) {
        if (!(this_present_orderItem && that_present_orderItem))
          return false;
        if (!this.orderItem.equals(that.orderItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderItem = true && (isSetOrderItem());
      list.add(present_orderItem);
      if (present_orderItem)
        list.add(orderItem);

      return list.hashCode();
    }

    @Override
    public int compareTo(addItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderItem()).compareTo(other.isSetOrderItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItem, other.orderItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addItem_args(");
      boolean first = true;

      sb.append("orderItem:");
      if (this.orderItem == null) {
        sb.append("null");
      } else {
        sb.append(this.orderItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (orderItem != null) {
        orderItem.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addItem_argsStandardSchemeFactory implements SchemeFactory {
      public addItem_argsStandardScheme getScheme() {
        return new addItem_argsStandardScheme();
      }
    }

    private static class addItem_argsStandardScheme extends StandardScheme<addItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orderItem = new OrderItem();
                struct.orderItem.read(iprot);
                struct.setOrderItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderItem != null) {
          oprot.writeFieldBegin(ORDER_ITEM_FIELD_DESC);
          struct.orderItem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addItem_argsTupleSchemeFactory implements SchemeFactory {
      public addItem_argsTupleScheme getScheme() {
        return new addItem_argsTupleScheme();
      }
    }

    private static class addItem_argsTupleScheme extends TupleScheme<addItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderItem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderItem()) {
          struct.orderItem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderItem = new OrderItem();
          struct.orderItem.read(iprot);
          struct.setOrderItemIsSet(true);
        }
      }
    }

  }

  public static class addItem_result implements org.apache.thrift.TBase<addItem_result, addItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<addItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addItem_result");

    private static final org.apache.thrift.protocol.TField PRODUCT_NOT_AVAILABLE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("productNotAvailableException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addItem_resultTupleSchemeFactory());
    }

    public ProductNotAvailableException productNotAvailableException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_NOT_AVAILABLE_EXCEPTION((short)1, "productNotAvailableException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_NOT_AVAILABLE_EXCEPTION
            return PRODUCT_NOT_AVAILABLE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_NOT_AVAILABLE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("productNotAvailableException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addItem_result.class, metaDataMap);
    }

    public addItem_result() {
    }

    public addItem_result(
      ProductNotAvailableException productNotAvailableException)
    {
      this();
      this.productNotAvailableException = productNotAvailableException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addItem_result(addItem_result other) {
      if (other.isSetProductNotAvailableException()) {
        this.productNotAvailableException = new ProductNotAvailableException(other.productNotAvailableException);
      }
    }

    public addItem_result deepCopy() {
      return new addItem_result(this);
    }

    @Override
    public void clear() {
      this.productNotAvailableException = null;
    }

    public ProductNotAvailableException getProductNotAvailableException() {
      return this.productNotAvailableException;
    }

    public addItem_result setProductNotAvailableException(ProductNotAvailableException productNotAvailableException) {
      this.productNotAvailableException = productNotAvailableException;
      return this;
    }

    public void unsetProductNotAvailableException() {
      this.productNotAvailableException = null;
    }

    /** Returns true if field productNotAvailableException is set (has been assigned a value) and false otherwise */
    public boolean isSetProductNotAvailableException() {
      return this.productNotAvailableException != null;
    }

    public void setProductNotAvailableExceptionIsSet(boolean value) {
      if (!value) {
        this.productNotAvailableException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_NOT_AVAILABLE_EXCEPTION:
        if (value == null) {
          unsetProductNotAvailableException();
        } else {
          setProductNotAvailableException((ProductNotAvailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_NOT_AVAILABLE_EXCEPTION:
        return getProductNotAvailableException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_NOT_AVAILABLE_EXCEPTION:
        return isSetProductNotAvailableException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addItem_result)
        return this.equals((addItem_result)that);
      return false;
    }

    public boolean equals(addItem_result that) {
      if (that == null)
        return false;

      boolean this_present_productNotAvailableException = true && this.isSetProductNotAvailableException();
      boolean that_present_productNotAvailableException = true && that.isSetProductNotAvailableException();
      if (this_present_productNotAvailableException || that_present_productNotAvailableException) {
        if (!(this_present_productNotAvailableException && that_present_productNotAvailableException))
          return false;
        if (!this.productNotAvailableException.equals(that.productNotAvailableException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productNotAvailableException = true && (isSetProductNotAvailableException());
      list.add(present_productNotAvailableException);
      if (present_productNotAvailableException)
        list.add(productNotAvailableException);

      return list.hashCode();
    }

    @Override
    public int compareTo(addItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductNotAvailableException()).compareTo(other.isSetProductNotAvailableException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductNotAvailableException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productNotAvailableException, other.productNotAvailableException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addItem_result(");
      boolean first = true;

      sb.append("productNotAvailableException:");
      if (this.productNotAvailableException == null) {
        sb.append("null");
      } else {
        sb.append(this.productNotAvailableException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addItem_resultStandardSchemeFactory implements SchemeFactory {
      public addItem_resultStandardScheme getScheme() {
        return new addItem_resultStandardScheme();
      }
    }

    private static class addItem_resultStandardScheme extends StandardScheme<addItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_NOT_AVAILABLE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productNotAvailableException = new ProductNotAvailableException();
                struct.productNotAvailableException.read(iprot);
                struct.setProductNotAvailableExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productNotAvailableException != null) {
          oprot.writeFieldBegin(PRODUCT_NOT_AVAILABLE_EXCEPTION_FIELD_DESC);
          struct.productNotAvailableException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addItem_resultTupleSchemeFactory implements SchemeFactory {
      public addItem_resultTupleScheme getScheme() {
        return new addItem_resultTupleScheme();
      }
    }

    private static class addItem_resultTupleScheme extends TupleScheme<addItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductNotAvailableException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductNotAvailableException()) {
          struct.productNotAvailableException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productNotAvailableException = new ProductNotAvailableException();
          struct.productNotAvailableException.read(iprot);
          struct.setProductNotAvailableExceptionIsSet(true);
        }
      }
    }

  }

  public static class removeFromCart_args implements org.apache.thrift.TBase<removeFromCart_args, removeFromCart_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeFromCart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromCart_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromCart_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromCart_argsTupleSchemeFactory());
    }

    public long productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromCart_args.class, metaDataMap);
    }

    public removeFromCart_args() {
    }

    public removeFromCart_args(
      long productId)
    {
      this();
      this.productId = productId;
      setProductIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromCart_args(removeFromCart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.productId = other.productId;
    }

    public removeFromCart_args deepCopy() {
      return new removeFromCart_args(this);
    }

    @Override
    public void clear() {
      setProductIdIsSet(false);
      this.productId = 0;
    }

    public long getProductId() {
      return this.productId;
    }

    public removeFromCart_args setProductId(long productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return Long.valueOf(getProductId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromCart_args)
        return this.equals((removeFromCart_args)that);
      return false;
    }

    public boolean equals(removeFromCart_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true;
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeFromCart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromCart_args(");
      boolean first = true;

      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromCart_argsStandardSchemeFactory implements SchemeFactory {
      public removeFromCart_argsStandardScheme getScheme() {
        return new removeFromCart_argsStandardScheme();
      }
    }

    private static class removeFromCart_argsStandardScheme extends StandardScheme<removeFromCart_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromCart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.productId = iprot.readI64();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromCart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromCart_argsTupleSchemeFactory implements SchemeFactory {
      public removeFromCart_argsTupleScheme getScheme() {
        return new removeFromCart_argsTupleScheme();
      }
    }

    private static class removeFromCart_argsTupleScheme extends TupleScheme<removeFromCart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeI64(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromCart_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readI64();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class removeFromCart_result implements org.apache.thrift.TBase<removeFromCart_result, removeFromCart_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeFromCart_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromCart_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromCart_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromCart_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromCart_result.class, metaDataMap);
    }

    public removeFromCart_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromCart_result(removeFromCart_result other) {
    }

    public removeFromCart_result deepCopy() {
      return new removeFromCart_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromCart_result)
        return this.equals((removeFromCart_result)that);
      return false;
    }

    public boolean equals(removeFromCart_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(removeFromCart_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromCart_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromCart_resultStandardSchemeFactory implements SchemeFactory {
      public removeFromCart_resultStandardScheme getScheme() {
        return new removeFromCart_resultStandardScheme();
      }
    }

    private static class removeFromCart_resultStandardScheme extends StandardScheme<removeFromCart_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromCart_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromCart_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromCart_resultTupleSchemeFactory implements SchemeFactory {
      public removeFromCart_resultTupleScheme getScheme() {
        return new removeFromCart_resultTupleScheme();
      }
    }

    private static class removeFromCart_resultTupleScheme extends TupleScheme<removeFromCart_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromCart_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class changeNumberOfPieces_args implements org.apache.thrift.TBase<changeNumberOfPieces_args, changeNumberOfPieces_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeNumberOfPieces_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeNumberOfPieces_args");

    private static final org.apache.thrift.protocol.TField ORDER_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderItem", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeNumberOfPieces_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeNumberOfPieces_argsTupleSchemeFactory());
    }

    public OrderItem orderItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ITEM((short)1, "orderItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ITEM
            return ORDER_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ITEM, new org.apache.thrift.meta_data.FieldMetaData("orderItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeNumberOfPieces_args.class, metaDataMap);
    }

    public changeNumberOfPieces_args() {
    }

    public changeNumberOfPieces_args(
      OrderItem orderItem)
    {
      this();
      this.orderItem = orderItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeNumberOfPieces_args(changeNumberOfPieces_args other) {
      if (other.isSetOrderItem()) {
        this.orderItem = new OrderItem(other.orderItem);
      }
    }

    public changeNumberOfPieces_args deepCopy() {
      return new changeNumberOfPieces_args(this);
    }

    @Override
    public void clear() {
      this.orderItem = null;
    }

    public OrderItem getOrderItem() {
      return this.orderItem;
    }

    public changeNumberOfPieces_args setOrderItem(OrderItem orderItem) {
      this.orderItem = orderItem;
      return this;
    }

    public void unsetOrderItem() {
      this.orderItem = null;
    }

    /** Returns true if field orderItem is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderItem() {
      return this.orderItem != null;
    }

    public void setOrderItemIsSet(boolean value) {
      if (!value) {
        this.orderItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ITEM:
        if (value == null) {
          unsetOrderItem();
        } else {
          setOrderItem((OrderItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ITEM:
        return getOrderItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ITEM:
        return isSetOrderItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeNumberOfPieces_args)
        return this.equals((changeNumberOfPieces_args)that);
      return false;
    }

    public boolean equals(changeNumberOfPieces_args that) {
      if (that == null)
        return false;

      boolean this_present_orderItem = true && this.isSetOrderItem();
      boolean that_present_orderItem = true && that.isSetOrderItem();
      if (this_present_orderItem || that_present_orderItem) {
        if (!(this_present_orderItem && that_present_orderItem))
          return false;
        if (!this.orderItem.equals(that.orderItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderItem = true && (isSetOrderItem());
      list.add(present_orderItem);
      if (present_orderItem)
        list.add(orderItem);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeNumberOfPieces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderItem()).compareTo(other.isSetOrderItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderItem, other.orderItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeNumberOfPieces_args(");
      boolean first = true;

      sb.append("orderItem:");
      if (this.orderItem == null) {
        sb.append("null");
      } else {
        sb.append(this.orderItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (orderItem != null) {
        orderItem.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeNumberOfPieces_argsStandardSchemeFactory implements SchemeFactory {
      public changeNumberOfPieces_argsStandardScheme getScheme() {
        return new changeNumberOfPieces_argsStandardScheme();
      }
    }

    private static class changeNumberOfPieces_argsStandardScheme extends StandardScheme<changeNumberOfPieces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeNumberOfPieces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orderItem = new OrderItem();
                struct.orderItem.read(iprot);
                struct.setOrderItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeNumberOfPieces_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderItem != null) {
          oprot.writeFieldBegin(ORDER_ITEM_FIELD_DESC);
          struct.orderItem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeNumberOfPieces_argsTupleSchemeFactory implements SchemeFactory {
      public changeNumberOfPieces_argsTupleScheme getScheme() {
        return new changeNumberOfPieces_argsTupleScheme();
      }
    }

    private static class changeNumberOfPieces_argsTupleScheme extends TupleScheme<changeNumberOfPieces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeNumberOfPieces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderItem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderItem()) {
          struct.orderItem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeNumberOfPieces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderItem = new OrderItem();
          struct.orderItem.read(iprot);
          struct.setOrderItemIsSet(true);
        }
      }
    }

  }

  public static class changeNumberOfPieces_result implements org.apache.thrift.TBase<changeNumberOfPieces_result, changeNumberOfPieces_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeNumberOfPieces_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeNumberOfPieces_result");

    private static final org.apache.thrift.protocol.TField PRODUCT_NOT_AVAILABLE_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("productNotAvailableException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new changeNumberOfPieces_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new changeNumberOfPieces_resultTupleSchemeFactory());
    }

    public ProductNotAvailableException productNotAvailableException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_NOT_AVAILABLE_EXCEPTION((short)1, "productNotAvailableException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_NOT_AVAILABLE_EXCEPTION
            return PRODUCT_NOT_AVAILABLE_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_NOT_AVAILABLE_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("productNotAvailableException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeNumberOfPieces_result.class, metaDataMap);
    }

    public changeNumberOfPieces_result() {
    }

    public changeNumberOfPieces_result(
      ProductNotAvailableException productNotAvailableException)
    {
      this();
      this.productNotAvailableException = productNotAvailableException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeNumberOfPieces_result(changeNumberOfPieces_result other) {
      if (other.isSetProductNotAvailableException()) {
        this.productNotAvailableException = new ProductNotAvailableException(other.productNotAvailableException);
      }
    }

    public changeNumberOfPieces_result deepCopy() {
      return new changeNumberOfPieces_result(this);
    }

    @Override
    public void clear() {
      this.productNotAvailableException = null;
    }

    public ProductNotAvailableException getProductNotAvailableException() {
      return this.productNotAvailableException;
    }

    public changeNumberOfPieces_result setProductNotAvailableException(ProductNotAvailableException productNotAvailableException) {
      this.productNotAvailableException = productNotAvailableException;
      return this;
    }

    public void unsetProductNotAvailableException() {
      this.productNotAvailableException = null;
    }

    /** Returns true if field productNotAvailableException is set (has been assigned a value) and false otherwise */
    public boolean isSetProductNotAvailableException() {
      return this.productNotAvailableException != null;
    }

    public void setProductNotAvailableExceptionIsSet(boolean value) {
      if (!value) {
        this.productNotAvailableException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_NOT_AVAILABLE_EXCEPTION:
        if (value == null) {
          unsetProductNotAvailableException();
        } else {
          setProductNotAvailableException((ProductNotAvailableException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_NOT_AVAILABLE_EXCEPTION:
        return getProductNotAvailableException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_NOT_AVAILABLE_EXCEPTION:
        return isSetProductNotAvailableException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeNumberOfPieces_result)
        return this.equals((changeNumberOfPieces_result)that);
      return false;
    }

    public boolean equals(changeNumberOfPieces_result that) {
      if (that == null)
        return false;

      boolean this_present_productNotAvailableException = true && this.isSetProductNotAvailableException();
      boolean that_present_productNotAvailableException = true && that.isSetProductNotAvailableException();
      if (this_present_productNotAvailableException || that_present_productNotAvailableException) {
        if (!(this_present_productNotAvailableException && that_present_productNotAvailableException))
          return false;
        if (!this.productNotAvailableException.equals(that.productNotAvailableException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productNotAvailableException = true && (isSetProductNotAvailableException());
      list.add(present_productNotAvailableException);
      if (present_productNotAvailableException)
        list.add(productNotAvailableException);

      return list.hashCode();
    }

    @Override
    public int compareTo(changeNumberOfPieces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductNotAvailableException()).compareTo(other.isSetProductNotAvailableException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductNotAvailableException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productNotAvailableException, other.productNotAvailableException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("changeNumberOfPieces_result(");
      boolean first = true;

      sb.append("productNotAvailableException:");
      if (this.productNotAvailableException == null) {
        sb.append("null");
      } else {
        sb.append(this.productNotAvailableException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeNumberOfPieces_resultStandardSchemeFactory implements SchemeFactory {
      public changeNumberOfPieces_resultStandardScheme getScheme() {
        return new changeNumberOfPieces_resultStandardScheme();
      }
    }

    private static class changeNumberOfPieces_resultStandardScheme extends StandardScheme<changeNumberOfPieces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeNumberOfPieces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_NOT_AVAILABLE_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productNotAvailableException = new ProductNotAvailableException();
                struct.productNotAvailableException.read(iprot);
                struct.setProductNotAvailableExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeNumberOfPieces_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productNotAvailableException != null) {
          oprot.writeFieldBegin(PRODUCT_NOT_AVAILABLE_EXCEPTION_FIELD_DESC);
          struct.productNotAvailableException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeNumberOfPieces_resultTupleSchemeFactory implements SchemeFactory {
      public changeNumberOfPieces_resultTupleScheme getScheme() {
        return new changeNumberOfPieces_resultTupleScheme();
      }
    }

    private static class changeNumberOfPieces_resultTupleScheme extends TupleScheme<changeNumberOfPieces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeNumberOfPieces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductNotAvailableException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductNotAvailableException()) {
          struct.productNotAvailableException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeNumberOfPieces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productNotAvailableException = new ProductNotAvailableException();
          struct.productNotAvailableException.read(iprot);
          struct.setProductNotAvailableExceptionIsSet(true);
        }
      }
    }

  }

  public static class confirmOrder_args implements org.apache.thrift.TBase<confirmOrder_args, confirmOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmOrder_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmOrder_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmOrder_args.class, metaDataMap);
    }

    public confirmOrder_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmOrder_args(confirmOrder_args other) {
    }

    public confirmOrder_args deepCopy() {
      return new confirmOrder_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmOrder_args)
        return this.equals((confirmOrder_args)that);
      return false;
    }

    public boolean equals(confirmOrder_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmOrder_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmOrder_argsStandardSchemeFactory implements SchemeFactory {
      public confirmOrder_argsStandardScheme getScheme() {
        return new confirmOrder_argsStandardScheme();
      }
    }

    private static class confirmOrder_argsStandardScheme extends StandardScheme<confirmOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmOrder_argsTupleSchemeFactory implements SchemeFactory {
      public confirmOrder_argsTupleScheme getScheme() {
        return new confirmOrder_argsTupleScheme();
      }
    }

    private static class confirmOrder_argsTupleScheme extends TupleScheme<confirmOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class confirmOrder_result implements org.apache.thrift.TBase<confirmOrder_result, confirmOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmOrder_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmOrder_result.class, metaDataMap);
    }

    public confirmOrder_result() {
    }

    public confirmOrder_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmOrder_result(confirmOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public confirmOrder_result deepCopy() {
      return new confirmOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public confirmOrder_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmOrder_result)
        return this.equals((confirmOrder_result)that);
      return false;
    }

    public boolean equals(confirmOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmOrder_resultStandardSchemeFactory implements SchemeFactory {
      public confirmOrder_resultStandardScheme getScheme() {
        return new confirmOrder_resultStandardScheme();
      }
    }

    private static class confirmOrder_resultStandardScheme extends StandardScheme<confirmOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmOrder_resultTupleSchemeFactory implements SchemeFactory {
      public confirmOrder_resultTupleScheme getScheme() {
        return new confirmOrder_resultTupleScheme();
      }
    }

    private static class confirmOrder_resultTupleScheme extends TupleScheme<confirmOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
