/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.pjwstk.sri.lab08;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-15")
public class ProductListService {

  public interface Iface {

    public List<Product> getProductsList() throws org.apache.thrift.TException;

    public void stockMagazine() throws org.apache.thrift.TException;

    public void addToMagazine(long productId, int numberOfPieces) throws org.apache.thrift.TException;

    public void removeFromMagazine(long productId, int numberOfPieces) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getProductsList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stockMagazine(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addToMagazine(long productId, int numberOfPieces, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeFromMagazine(long productId, int numberOfPieces, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Product> getProductsList() throws org.apache.thrift.TException
    {
      send_getProductsList();
      return recv_getProductsList();
    }

    public void send_getProductsList() throws org.apache.thrift.TException
    {
      getProductsList_args args = new getProductsList_args();
      sendBase("getProductsList", args);
    }

    public List<Product> recv_getProductsList() throws org.apache.thrift.TException
    {
      getProductsList_result result = new getProductsList_result();
      receiveBase(result, "getProductsList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductsList failed: unknown result");
    }

    public void stockMagazine() throws org.apache.thrift.TException
    {
      send_stockMagazine();
      recv_stockMagazine();
    }

    public void send_stockMagazine() throws org.apache.thrift.TException
    {
      stockMagazine_args args = new stockMagazine_args();
      sendBase("stockMagazine", args);
    }

    public void recv_stockMagazine() throws org.apache.thrift.TException
    {
      stockMagazine_result result = new stockMagazine_result();
      receiveBase(result, "stockMagazine");
      return;
    }

    public void addToMagazine(long productId, int numberOfPieces) throws org.apache.thrift.TException
    {
      send_addToMagazine(productId, numberOfPieces);
      recv_addToMagazine();
    }

    public void send_addToMagazine(long productId, int numberOfPieces) throws org.apache.thrift.TException
    {
      addToMagazine_args args = new addToMagazine_args();
      args.setProductId(productId);
      args.setNumberOfPieces(numberOfPieces);
      sendBase("addToMagazine", args);
    }

    public void recv_addToMagazine() throws org.apache.thrift.TException
    {
      addToMagazine_result result = new addToMagazine_result();
      receiveBase(result, "addToMagazine");
      return;
    }

    public void removeFromMagazine(long productId, int numberOfPieces) throws org.apache.thrift.TException
    {
      send_removeFromMagazine(productId, numberOfPieces);
      recv_removeFromMagazine();
    }

    public void send_removeFromMagazine(long productId, int numberOfPieces) throws org.apache.thrift.TException
    {
      removeFromMagazine_args args = new removeFromMagazine_args();
      args.setProductId(productId);
      args.setNumberOfPieces(numberOfPieces);
      sendBase("removeFromMagazine", args);
    }

    public void recv_removeFromMagazine() throws org.apache.thrift.TException
    {
      removeFromMagazine_result result = new removeFromMagazine_result();
      receiveBase(result, "removeFromMagazine");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getProductsList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductsList_call method_call = new getProductsList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductsList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getProductsList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductsList_args args = new getProductsList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Product> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductsList();
      }
    }

    public void stockMagazine(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stockMagazine_call method_call = new stockMagazine_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stockMagazine_call extends org.apache.thrift.async.TAsyncMethodCall {
      public stockMagazine_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stockMagazine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stockMagazine_args args = new stockMagazine_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stockMagazine();
      }
    }

    public void addToMagazine(long productId, int numberOfPieces, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToMagazine_call method_call = new addToMagazine_call(productId, numberOfPieces, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToMagazine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long productId;
      private int numberOfPieces;
      public addToMagazine_call(long productId, int numberOfPieces, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.numberOfPieces = numberOfPieces;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToMagazine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToMagazine_args args = new addToMagazine_args();
        args.setProductId(productId);
        args.setNumberOfPieces(numberOfPieces);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addToMagazine();
      }
    }

    public void removeFromMagazine(long productId, int numberOfPieces, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeFromMagazine_call method_call = new removeFromMagazine_call(productId, numberOfPieces, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeFromMagazine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long productId;
      private int numberOfPieces;
      public removeFromMagazine_call(long productId, int numberOfPieces, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.numberOfPieces = numberOfPieces;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeFromMagazine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeFromMagazine_args args = new removeFromMagazine_args();
        args.setProductId(productId);
        args.setNumberOfPieces(numberOfPieces);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removeFromMagazine();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getProductsList", new getProductsList());
      processMap.put("stockMagazine", new stockMagazine());
      processMap.put("addToMagazine", new addToMagazine());
      processMap.put("removeFromMagazine", new removeFromMagazine());
      return processMap;
    }

    public static class getProductsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductsList_args> {
      public getProductsList() {
        super("getProductsList");
      }

      public getProductsList_args getEmptyArgsInstance() {
        return new getProductsList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductsList_result getResult(I iface, getProductsList_args args) throws org.apache.thrift.TException {
        getProductsList_result result = new getProductsList_result();
        result.success = iface.getProductsList();
        return result;
      }
    }

    public static class stockMagazine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stockMagazine_args> {
      public stockMagazine() {
        super("stockMagazine");
      }

      public stockMagazine_args getEmptyArgsInstance() {
        return new stockMagazine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stockMagazine_result getResult(I iface, stockMagazine_args args) throws org.apache.thrift.TException {
        stockMagazine_result result = new stockMagazine_result();
        iface.stockMagazine();
        return result;
      }
    }

    public static class addToMagazine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToMagazine_args> {
      public addToMagazine() {
        super("addToMagazine");
      }

      public addToMagazine_args getEmptyArgsInstance() {
        return new addToMagazine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToMagazine_result getResult(I iface, addToMagazine_args args) throws org.apache.thrift.TException {
        addToMagazine_result result = new addToMagazine_result();
        iface.addToMagazine(args.productId, args.numberOfPieces);
        return result;
      }
    }

    public static class removeFromMagazine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeFromMagazine_args> {
      public removeFromMagazine() {
        super("removeFromMagazine");
      }

      public removeFromMagazine_args getEmptyArgsInstance() {
        return new removeFromMagazine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeFromMagazine_result getResult(I iface, removeFromMagazine_args args) throws org.apache.thrift.TException {
        removeFromMagazine_result result = new removeFromMagazine_result();
        iface.removeFromMagazine(args.productId, args.numberOfPieces);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getProductsList", new getProductsList());
      processMap.put("stockMagazine", new stockMagazine());
      processMap.put("addToMagazine", new addToMagazine());
      processMap.put("removeFromMagazine", new removeFromMagazine());
      return processMap;
    }

    public static class getProductsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductsList_args, List<Product>> {
      public getProductsList() {
        super("getProductsList");
      }

      public getProductsList_args getEmptyArgsInstance() {
        return new getProductsList_args();
      }

      public AsyncMethodCallback<List<Product>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Product>>() { 
          public void onComplete(List<Product> o) {
            getProductsList_result result = new getProductsList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductsList_result result = new getProductsList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductsList_args args, org.apache.thrift.async.AsyncMethodCallback<List<Product>> resultHandler) throws TException {
        iface.getProductsList(resultHandler);
      }
    }

    public static class stockMagazine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stockMagazine_args, Void> {
      public stockMagazine() {
        super("stockMagazine");
      }

      public stockMagazine_args getEmptyArgsInstance() {
        return new stockMagazine_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stockMagazine_result result = new stockMagazine_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stockMagazine_result result = new stockMagazine_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stockMagazine_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stockMagazine(resultHandler);
      }
    }

    public static class addToMagazine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addToMagazine_args, Void> {
      public addToMagazine() {
        super("addToMagazine");
      }

      public addToMagazine_args getEmptyArgsInstance() {
        return new addToMagazine_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addToMagazine_result result = new addToMagazine_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addToMagazine_result result = new addToMagazine_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addToMagazine_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addToMagazine(args.productId, args.numberOfPieces,resultHandler);
      }
    }

    public static class removeFromMagazine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeFromMagazine_args, Void> {
      public removeFromMagazine() {
        super("removeFromMagazine");
      }

      public removeFromMagazine_args getEmptyArgsInstance() {
        return new removeFromMagazine_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeFromMagazine_result result = new removeFromMagazine_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeFromMagazine_result result = new removeFromMagazine_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeFromMagazine_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removeFromMagazine(args.productId, args.numberOfPieces,resultHandler);
      }
    }

  }

  public static class getProductsList_args implements org.apache.thrift.TBase<getProductsList_args, getProductsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductsList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsList_args.class, metaDataMap);
    }

    public getProductsList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsList_args(getProductsList_args other) {
    }

    public getProductsList_args deepCopy() {
      return new getProductsList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsList_args)
        return this.equals((getProductsList_args)that);
      return false;
    }

    public boolean equals(getProductsList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductsList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsList_argsStandardSchemeFactory implements SchemeFactory {
      public getProductsList_argsStandardScheme getScheme() {
        return new getProductsList_argsStandardScheme();
      }
    }

    private static class getProductsList_argsStandardScheme extends StandardScheme<getProductsList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsList_argsTupleSchemeFactory implements SchemeFactory {
      public getProductsList_argsTupleScheme getScheme() {
        return new getProductsList_argsTupleScheme();
      }
    }

    private static class getProductsList_argsTupleScheme extends TupleScheme<getProductsList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getProductsList_result implements org.apache.thrift.TBase<getProductsList_result, getProductsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductsList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductsList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductsList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductsList_resultTupleSchemeFactory());
    }

    public List<Product> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductsList_result.class, metaDataMap);
    }

    public getProductsList_result() {
    }

    public getProductsList_result(
      List<Product> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductsList_result(getProductsList_result other) {
      if (other.isSetSuccess()) {
        List<Product> __this__success = new ArrayList<Product>(other.success.size());
        for (Product other_element : other.success) {
          __this__success.add(new Product(other_element));
        }
        this.success = __this__success;
      }
    }

    public getProductsList_result deepCopy() {
      return new getProductsList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Product> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Product elem) {
      if (this.success == null) {
        this.success = new ArrayList<Product>();
      }
      this.success.add(elem);
    }

    public List<Product> getSuccess() {
      return this.success;
    }

    public getProductsList_result setSuccess(List<Product> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Product>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductsList_result)
        return this.equals((getProductsList_result)that);
      return false;
    }

    public boolean equals(getProductsList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProductsList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductsList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductsList_resultStandardSchemeFactory implements SchemeFactory {
      public getProductsList_resultStandardScheme getScheme() {
        return new getProductsList_resultStandardScheme();
      }
    }

    private static class getProductsList_resultStandardScheme extends StandardScheme<getProductsList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductsList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Product>(_list0.size);
                  Product _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new Product();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductsList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Product _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductsList_resultTupleSchemeFactory implements SchemeFactory {
      public getProductsList_resultTupleScheme getScheme() {
        return new getProductsList_resultTupleScheme();
      }
    }

    private static class getProductsList_resultTupleScheme extends TupleScheme<getProductsList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Product _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Product>(_list5.size);
            Product _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new Product();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stockMagazine_args implements org.apache.thrift.TBase<stockMagazine_args, stockMagazine_args._Fields>, java.io.Serializable, Cloneable, Comparable<stockMagazine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stockMagazine_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stockMagazine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stockMagazine_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stockMagazine_args.class, metaDataMap);
    }

    public stockMagazine_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stockMagazine_args(stockMagazine_args other) {
    }

    public stockMagazine_args deepCopy() {
      return new stockMagazine_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stockMagazine_args)
        return this.equals((stockMagazine_args)that);
      return false;
    }

    public boolean equals(stockMagazine_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(stockMagazine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stockMagazine_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stockMagazine_argsStandardSchemeFactory implements SchemeFactory {
      public stockMagazine_argsStandardScheme getScheme() {
        return new stockMagazine_argsStandardScheme();
      }
    }

    private static class stockMagazine_argsStandardScheme extends StandardScheme<stockMagazine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stockMagazine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stockMagazine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stockMagazine_argsTupleSchemeFactory implements SchemeFactory {
      public stockMagazine_argsTupleScheme getScheme() {
        return new stockMagazine_argsTupleScheme();
      }
    }

    private static class stockMagazine_argsTupleScheme extends TupleScheme<stockMagazine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stockMagazine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stockMagazine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class stockMagazine_result implements org.apache.thrift.TBase<stockMagazine_result, stockMagazine_result._Fields>, java.io.Serializable, Cloneable, Comparable<stockMagazine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stockMagazine_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stockMagazine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stockMagazine_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stockMagazine_result.class, metaDataMap);
    }

    public stockMagazine_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stockMagazine_result(stockMagazine_result other) {
    }

    public stockMagazine_result deepCopy() {
      return new stockMagazine_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stockMagazine_result)
        return this.equals((stockMagazine_result)that);
      return false;
    }

    public boolean equals(stockMagazine_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(stockMagazine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stockMagazine_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stockMagazine_resultStandardSchemeFactory implements SchemeFactory {
      public stockMagazine_resultStandardScheme getScheme() {
        return new stockMagazine_resultStandardScheme();
      }
    }

    private static class stockMagazine_resultStandardScheme extends StandardScheme<stockMagazine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stockMagazine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stockMagazine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stockMagazine_resultTupleSchemeFactory implements SchemeFactory {
      public stockMagazine_resultTupleScheme getScheme() {
        return new stockMagazine_resultTupleScheme();
      }
    }

    private static class stockMagazine_resultTupleScheme extends TupleScheme<stockMagazine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stockMagazine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stockMagazine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addToMagazine_args implements org.apache.thrift.TBase<addToMagazine_args, addToMagazine_args._Fields>, java.io.Serializable, Cloneable, Comparable<addToMagazine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToMagazine_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER_OF_PIECES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfPieces", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToMagazine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToMagazine_argsTupleSchemeFactory());
    }

    public long productId; // required
    public int numberOfPieces; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId"),
      NUMBER_OF_PIECES((short)2, "numberOfPieces");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          case 2: // NUMBER_OF_PIECES
            return NUMBER_OF_PIECES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private static final int __NUMBEROFPIECES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER_OF_PIECES, new org.apache.thrift.meta_data.FieldMetaData("numberOfPieces", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToMagazine_args.class, metaDataMap);
    }

    public addToMagazine_args() {
    }

    public addToMagazine_args(
      long productId,
      int numberOfPieces)
    {
      this();
      this.productId = productId;
      setProductIdIsSet(true);
      this.numberOfPieces = numberOfPieces;
      setNumberOfPiecesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToMagazine_args(addToMagazine_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.productId = other.productId;
      this.numberOfPieces = other.numberOfPieces;
    }

    public addToMagazine_args deepCopy() {
      return new addToMagazine_args(this);
    }

    @Override
    public void clear() {
      setProductIdIsSet(false);
      this.productId = 0;
      setNumberOfPiecesIsSet(false);
      this.numberOfPieces = 0;
    }

    public long getProductId() {
      return this.productId;
    }

    public addToMagazine_args setProductId(long productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public int getNumberOfPieces() {
      return this.numberOfPieces;
    }

    public addToMagazine_args setNumberOfPieces(int numberOfPieces) {
      this.numberOfPieces = numberOfPieces;
      setNumberOfPiecesIsSet(true);
      return this;
    }

    public void unsetNumberOfPieces() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFPIECES_ISSET_ID);
    }

    /** Returns true if field numberOfPieces is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfPieces() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFPIECES_ISSET_ID);
    }

    public void setNumberOfPiecesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFPIECES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Long)value);
        }
        break;

      case NUMBER_OF_PIECES:
        if (value == null) {
          unsetNumberOfPieces();
        } else {
          setNumberOfPieces((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return Long.valueOf(getProductId());

      case NUMBER_OF_PIECES:
        return Integer.valueOf(getNumberOfPieces());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      case NUMBER_OF_PIECES:
        return isSetNumberOfPieces();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToMagazine_args)
        return this.equals((addToMagazine_args)that);
      return false;
    }

    public boolean equals(addToMagazine_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      boolean this_present_numberOfPieces = true;
      boolean that_present_numberOfPieces = true;
      if (this_present_numberOfPieces || that_present_numberOfPieces) {
        if (!(this_present_numberOfPieces && that_present_numberOfPieces))
          return false;
        if (this.numberOfPieces != that.numberOfPieces)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true;
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_numberOfPieces = true;
      list.add(present_numberOfPieces);
      if (present_numberOfPieces)
        list.add(numberOfPieces);

      return list.hashCode();
    }

    @Override
    public int compareTo(addToMagazine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumberOfPieces()).compareTo(other.isSetNumberOfPieces());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfPieces()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfPieces, other.numberOfPieces);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToMagazine_args(");
      boolean first = true;

      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberOfPieces:");
      sb.append(this.numberOfPieces);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToMagazine_argsStandardSchemeFactory implements SchemeFactory {
      public addToMagazine_argsStandardScheme getScheme() {
        return new addToMagazine_argsStandardScheme();
      }
    }

    private static class addToMagazine_argsStandardScheme extends StandardScheme<addToMagazine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToMagazine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.productId = iprot.readI64();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER_OF_PIECES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numberOfPieces = iprot.readI32();
                struct.setNumberOfPiecesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToMagazine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_OF_PIECES_FIELD_DESC);
        oprot.writeI32(struct.numberOfPieces);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToMagazine_argsTupleSchemeFactory implements SchemeFactory {
      public addToMagazine_argsTupleScheme getScheme() {
        return new addToMagazine_argsTupleScheme();
      }
    }

    private static class addToMagazine_argsTupleScheme extends TupleScheme<addToMagazine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToMagazine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        if (struct.isSetNumberOfPieces()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductId()) {
          oprot.writeI64(struct.productId);
        }
        if (struct.isSetNumberOfPieces()) {
          oprot.writeI32(struct.numberOfPieces);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToMagazine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productId = iprot.readI64();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numberOfPieces = iprot.readI32();
          struct.setNumberOfPiecesIsSet(true);
        }
      }
    }

  }

  public static class addToMagazine_result implements org.apache.thrift.TBase<addToMagazine_result, addToMagazine_result._Fields>, java.io.Serializable, Cloneable, Comparable<addToMagazine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToMagazine_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToMagazine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToMagazine_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToMagazine_result.class, metaDataMap);
    }

    public addToMagazine_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToMagazine_result(addToMagazine_result other) {
    }

    public addToMagazine_result deepCopy() {
      return new addToMagazine_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToMagazine_result)
        return this.equals((addToMagazine_result)that);
      return false;
    }

    public boolean equals(addToMagazine_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addToMagazine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToMagazine_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToMagazine_resultStandardSchemeFactory implements SchemeFactory {
      public addToMagazine_resultStandardScheme getScheme() {
        return new addToMagazine_resultStandardScheme();
      }
    }

    private static class addToMagazine_resultStandardScheme extends StandardScheme<addToMagazine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToMagazine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToMagazine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToMagazine_resultTupleSchemeFactory implements SchemeFactory {
      public addToMagazine_resultTupleScheme getScheme() {
        return new addToMagazine_resultTupleScheme();
      }
    }

    private static class addToMagazine_resultTupleScheme extends TupleScheme<addToMagazine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToMagazine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToMagazine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class removeFromMagazine_args implements org.apache.thrift.TBase<removeFromMagazine_args, removeFromMagazine_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeFromMagazine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromMagazine_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER_OF_PIECES_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfPieces", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromMagazine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromMagazine_argsTupleSchemeFactory());
    }

    public long productId; // required
    public int numberOfPieces; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId"),
      NUMBER_OF_PIECES((short)2, "numberOfPieces");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          case 2: // NUMBER_OF_PIECES
            return NUMBER_OF_PIECES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private static final int __NUMBEROFPIECES_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUMBER_OF_PIECES, new org.apache.thrift.meta_data.FieldMetaData("numberOfPieces", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromMagazine_args.class, metaDataMap);
    }

    public removeFromMagazine_args() {
    }

    public removeFromMagazine_args(
      long productId,
      int numberOfPieces)
    {
      this();
      this.productId = productId;
      setProductIdIsSet(true);
      this.numberOfPieces = numberOfPieces;
      setNumberOfPiecesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromMagazine_args(removeFromMagazine_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.productId = other.productId;
      this.numberOfPieces = other.numberOfPieces;
    }

    public removeFromMagazine_args deepCopy() {
      return new removeFromMagazine_args(this);
    }

    @Override
    public void clear() {
      setProductIdIsSet(false);
      this.productId = 0;
      setNumberOfPiecesIsSet(false);
      this.numberOfPieces = 0;
    }

    public long getProductId() {
      return this.productId;
    }

    public removeFromMagazine_args setProductId(long productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public int getNumberOfPieces() {
      return this.numberOfPieces;
    }

    public removeFromMagazine_args setNumberOfPieces(int numberOfPieces) {
      this.numberOfPieces = numberOfPieces;
      setNumberOfPiecesIsSet(true);
      return this;
    }

    public void unsetNumberOfPieces() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFPIECES_ISSET_ID);
    }

    /** Returns true if field numberOfPieces is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfPieces() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMBEROFPIECES_ISSET_ID);
    }

    public void setNumberOfPiecesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMBEROFPIECES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Long)value);
        }
        break;

      case NUMBER_OF_PIECES:
        if (value == null) {
          unsetNumberOfPieces();
        } else {
          setNumberOfPieces((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return Long.valueOf(getProductId());

      case NUMBER_OF_PIECES:
        return Integer.valueOf(getNumberOfPieces());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      case NUMBER_OF_PIECES:
        return isSetNumberOfPieces();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromMagazine_args)
        return this.equals((removeFromMagazine_args)that);
      return false;
    }

    public boolean equals(removeFromMagazine_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      boolean this_present_numberOfPieces = true;
      boolean that_present_numberOfPieces = true;
      if (this_present_numberOfPieces || that_present_numberOfPieces) {
        if (!(this_present_numberOfPieces && that_present_numberOfPieces))
          return false;
        if (this.numberOfPieces != that.numberOfPieces)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_productId = true;
      list.add(present_productId);
      if (present_productId)
        list.add(productId);

      boolean present_numberOfPieces = true;
      list.add(present_numberOfPieces);
      if (present_numberOfPieces)
        list.add(numberOfPieces);

      return list.hashCode();
    }

    @Override
    public int compareTo(removeFromMagazine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumberOfPieces()).compareTo(other.isSetNumberOfPieces());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfPieces()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfPieces, other.numberOfPieces);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromMagazine_args(");
      boolean first = true;

      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberOfPieces:");
      sb.append(this.numberOfPieces);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromMagazine_argsStandardSchemeFactory implements SchemeFactory {
      public removeFromMagazine_argsStandardScheme getScheme() {
        return new removeFromMagazine_argsStandardScheme();
      }
    }

    private static class removeFromMagazine_argsStandardScheme extends StandardScheme<removeFromMagazine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromMagazine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.productId = iprot.readI64();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER_OF_PIECES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numberOfPieces = iprot.readI32();
                struct.setNumberOfPiecesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromMagazine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_OF_PIECES_FIELD_DESC);
        oprot.writeI32(struct.numberOfPieces);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromMagazine_argsTupleSchemeFactory implements SchemeFactory {
      public removeFromMagazine_argsTupleScheme getScheme() {
        return new removeFromMagazine_argsTupleScheme();
      }
    }

    private static class removeFromMagazine_argsTupleScheme extends TupleScheme<removeFromMagazine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromMagazine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        if (struct.isSetNumberOfPieces()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductId()) {
          oprot.writeI64(struct.productId);
        }
        if (struct.isSetNumberOfPieces()) {
          oprot.writeI32(struct.numberOfPieces);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromMagazine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productId = iprot.readI64();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numberOfPieces = iprot.readI32();
          struct.setNumberOfPiecesIsSet(true);
        }
      }
    }

  }

  public static class removeFromMagazine_result implements org.apache.thrift.TBase<removeFromMagazine_result, removeFromMagazine_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeFromMagazine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeFromMagazine_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeFromMagazine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeFromMagazine_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeFromMagazine_result.class, metaDataMap);
    }

    public removeFromMagazine_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFromMagazine_result(removeFromMagazine_result other) {
    }

    public removeFromMagazine_result deepCopy() {
      return new removeFromMagazine_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFromMagazine_result)
        return this.equals((removeFromMagazine_result)that);
      return false;
    }

    public boolean equals(removeFromMagazine_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(removeFromMagazine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeFromMagazine_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeFromMagazine_resultStandardSchemeFactory implements SchemeFactory {
      public removeFromMagazine_resultStandardScheme getScheme() {
        return new removeFromMagazine_resultStandardScheme();
      }
    }

    private static class removeFromMagazine_resultStandardScheme extends StandardScheme<removeFromMagazine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeFromMagazine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeFromMagazine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeFromMagazine_resultTupleSchemeFactory implements SchemeFactory {
      public removeFromMagazine_resultTupleScheme getScheme() {
        return new removeFromMagazine_resultTupleScheme();
      }
    }

    private static class removeFromMagazine_resultTupleScheme extends TupleScheme<removeFromMagazine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeFromMagazine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeFromMagazine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
